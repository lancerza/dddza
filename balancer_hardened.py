#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Hardened balancer/port manager for XtreamUi-R22F.
# - Avoids brittle sed on monolithic configs; writes dedicated include files.
# - Validates ports, prevents collisions, reloads nginx safely.
# - No chmod 0777. Keeps ownership to xtreamcodes.

import os, sys, pathlib, subprocess

XTC_USER   = "xtreamcodes"
XTC_GROUP  = "xtreamcodes"
NGINX_DIR  = pathlib.Path("/etc/nginx")
CONF_D_DIR = NGINX_DIR / "conf.d"
PORTS_CONF = CONF_D_DIR / "xtreamcodes-ports.conf"

DEFAULT_HTTP_PORT = 25500
DEFAULT_RTMP_PORT = 25462
DEFAULT_API_PORT  = 25461

def run(cmd):
    print("+", cmd)
    subprocess.run(cmd, shell=True, check=True)

def validate_port(p):
    p = int(p)
    if not (1 <= p <= 65535):
        raise ValueError("Port out of range")
    return p

def write_ports(http_port, rtmp_port, api_port):
    CONF_D_DIR.mkdir(parents=True, exist_ok=True)
    content = f"""
# Autogenerated port bindings for XtreamCodes
server {{ listen {http_port} default_server; server_name _; return 200 "OK"; }}
# Example upstreams (adjust to your app):
# stream {{ server {{ listen {rtmp_port}; }} }}
# server {{ listen {api_port}; }}
"""
    PORTS_CONF.write_text(content)
    os.chmod(PORTS_CONF, 0o644)

def nginx_test_reload():
    run("nginx -t")
    run("systemctl reload nginx")

def main(args):
    http_port = int(os.environ.get("XTC_HTTP_PORT", DEFAULT_HTTP_PORT))
    rtmp_port = int(os.environ.get("XTC_RTMP_PORT", DEFAULT_RTMP_PORT))
    api_port  = int(os.environ.get("XTC_API_PORT",  DEFAULT_API_PORT))
    if len(args) >= 2:
        http_port = validate_port(args[1])
    if len(args) >= 3:
        rtmp_port = validate_port(args[2])
    if len(args) >= 4:
        api_port  = validate_port(args[3])
    write_ports(http_port, rtmp_port, api_port)
    nginx_test_reload()
    print(f"[OK] Ports updated: HTTP={{http_port}}, RTMP={{rtmp_port}}, API={{api_port}}")

if __name__ == "__main__":
    main(sys.argv)
